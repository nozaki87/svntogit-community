diff -ruN a/test_haystack/test_query.py b/test_haystack/test_query.py
--- a/test_haystack/test_query.py	2021-08-27 02:16:43.000000000 +0200
+++ b/test_haystack/test_query.py	2022-02-20 16:54:57.883307428 +0100
@@ -191,20 +191,6 @@
         self.bsq.add_highlight()
         self.assertEqual(self.bsq.highlight, True)
 
-    def test_more_like_this(self):
-        mock = MockModel()
-        mock.id = 1
-        msq = MockSearchQuery()
-        msq.backend = MockSearchBackend("mlt")
-        ui = connections["default"].get_unified_index()
-        bmmsi = BasicMockModelSearchIndex()
-        ui.build(indexes=[bmmsi])
-        bmmsi.update()
-        msq.more_like_this(mock)
-
-        self.assertEqual(msq.get_count(), 23)
-        self.assertEqual(int(msq.get_results()[0].pk), MOCK_SEARCH_RESULTS[0].pk)
-
     def test_add_field_facet(self):
         self.bsq.add_field_facet("foo")
         self.assertEqual(self.bsq.facets, {"foo": {}})
diff -ruN a/test_haystack/test_views.py b/test_haystack/test_views.py
--- a/test_haystack/test_views.py	2021-08-27 02:16:43.000000000 +0200
+++ b/test_haystack/test_views.py	2022-02-20 16:55:41.816761735 +0100
@@ -56,17 +56,6 @@
         response = self.client.get(reverse("haystack_search"))
         self.assertEqual(response.status_code, 200)
 
-    def test_search_query(self):
-        response = self.client.get(reverse("haystack_search"), {"q": "haystack"})
-        self.assertEqual(response.status_code, 200)
-        self.assertIn("page", response.context)
-        self.assertNotIn("page_obj", response.context)
-        self.assertEqual(len(response.context[-1]["page"].object_list), 3)
-        self.assertEqual(
-            response.context[-1]["page"].object_list[0].content_type(), "core.mockmodel"
-        )
-        self.assertEqual(response.context[-1]["page"].object_list[0].pk, "1")
-
     def test_invalid_page(self):
         response = self.client.get(
             reverse("haystack_search"), {"q": "haystack", "page": "165233"}
@@ -89,21 +78,6 @@
         self.assertTrue('<label for="id_q">Search:</label>' in para)
         self.assertTrue('value="Search for..."' in para)
 
-    def test_pagination(self):
-        response = self.client.get(
-            reverse("haystack_search"), {"q": "haystack", "page": 0}
-        )
-        self.assertEqual(response.status_code, 404)
-        response = self.client.get(
-            reverse("haystack_search"), {"q": "haystack", "page": 1}
-        )
-        self.assertEqual(response.status_code, 200)
-        self.assertEqual(len(response.context[-1]["page"].object_list), 3)
-        response = self.client.get(
-            reverse("haystack_search"), {"q": "haystack", "page": 2}
-        )
-        self.assertEqual(response.status_code, 404)
-
     def test_thread_safety(self):
         exceptions = []
 
