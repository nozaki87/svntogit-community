diff -ruN a/spsdk/mboot/interfaces/__init__.py b/spsdk/mboot/interfaces/__init__.py
--- a/spsdk/mboot/interfaces/__init__.py	2022-02-04 14:27:29.000000000 +0100
+++ b/spsdk/mboot/interfaces/__init__.py	2022-02-14 00:15:14.754121893 +0100
@@ -10,4 +10,3 @@
 from .base import Interface
 from .uart import Uart, scan_uart
 from .usb import RawHid, scan_usb
-from .usbsio import UsbSioI2C, UsbSioSPI, scan_usbsio
diff -ruN a/spsdk/mboot/interfaces/usb.py b/spsdk/mboot/interfaces/usb.py
--- a/spsdk/mboot/interfaces/usb.py	2022-02-04 14:27:29.000000000 +0100
+++ b/spsdk/mboot/interfaces/usb.py	2022-02-14 00:12:32.227394246 +0100
@@ -11,8 +11,6 @@
 from struct import pack, unpack_from
 from typing import Sequence, Union
 
-import libusbsio
-
 from spsdk.utils.usbfilter import NXPUSBDeviceFilter, USBDeviceFilter
 
 from ..commands import CmdPacket, CmdResponse, parse_cmd_response
@@ -249,23 +247,4 @@
         :param usb_device_filter: USBDeviceFilter object
         :return: List of interfaces found
         """
-        devices = []
-
-        # use HID_API of LIBUSBSIO library to enumerate all USB HID devices
-        sio = libusbsio.usbsio()
-        all_hid_devices = sio.HIDAPI_Enumerate()
-
-        # iterate on all devices found
-        for dev in all_hid_devices:
-            if usb_device_filter.compare(dev) is True:
-                new_device = RawHid()
-                new_device.device = sio.HIDAPI_DeviceCreate()
-                new_device.vid = dev["vendor_id"]
-                new_device.pid = dev["product_id"]
-                new_device.vendor_name = dev["manufacturer_string"]
-                new_device.product_name = dev["product_string"]
-                new_device.interface_number = dev["interface_number"]
-                new_device.path = dev["path"]
-                devices.append(new_device)
-
-        return devices
+        return []
diff -ruN a/spsdk/sdp/interfaces/usb.py b/spsdk/sdp/interfaces/usb.py
--- a/spsdk/sdp/interfaces/usb.py	2022-02-04 14:27:29.000000000 +0100
+++ b/spsdk/sdp/interfaces/usb.py	2022-02-14 00:16:40.930819269 +0100
@@ -8,11 +8,8 @@
 """Module for USB communication with a terget using SDP protocol."""
 
 import logging
-import platform
 from typing import Sequence, Tuple, Union
 
-import libusbsio
-
 from spsdk import SPSDKError
 from spsdk.utils.usbfilter import NXPUSBDeviceFilter, USBDeviceFilter
 
@@ -240,21 +237,4 @@
         :param usb_device_filter: USBDeviceFilter object
         :return: List of interfaces found
         """
-        devices = []
-        sio = libusbsio.usbsio()
-        all_hid_devices = sio.HIDAPI_Enumerate()
-
-        # iterate on all devices found
-        for dev in all_hid_devices:
-            if usb_device_filter.compare(dev) is True:
-                new_device = RawHid()
-                new_device.device = sio.HIDAPI_DeviceCreate()
-                new_device.vid = dev["vendor_id"]
-                new_device.pid = dev["product_id"]
-                new_device.vendor_name = dev["manufacturer_string"]
-                new_device.product_name = dev["product_string"]
-                new_device.interface_number = dev["interface_number"]
-                new_device.path = dev["path"]
-                devices.append(new_device)
-
-        return devices
+        return []
diff -ruN a/spsdk/utils/nxpdevscan.py b/spsdk/utils/nxpdevscan.py
--- a/spsdk/utils/nxpdevscan.py	2022-02-04 14:27:29.000000000 +0100
+++ b/spsdk/utils/nxpdevscan.py	2022-02-14 00:18:41.700860824 +0100
@@ -11,7 +11,6 @@
 import logging
 from typing import Sequence
 
-import libusbsio
 from serial.tools.list_ports import comports
 
 from spsdk.mboot.interfaces.uart import scan_uart as mb_scan_uart
@@ -41,33 +40,7 @@
     :extend_vid_list: list of VIDs, to extend the default NXP VID list (int)
     :return: list of dicts corresponding to NXP devices
     """
-    sio = libusbsio.usbsio()
-    all_usb_devices = sio.HIDAPI_Enumerate()
-    nxp_usb_devices = []
-
-    search_vids = NXP_USB_DEVICE_VIDS
-
-    if extend_vid_list is not None:
-        search_vids = list(set(search_vids) | set(extend_vid_list))
-
-    for usb_device in all_usb_devices:
-        for nxp_vid in search_vids:
-            if nxp_vid == usb_device["vendor_id"]:
-                # We found our device, let's create container for it
-                vid = usb_device["vendor_id"]
-                pid = usb_device["product_id"]
-                path = convert_usb_path(usb_device["path"])
-                product_string = usb_device["product_string"]
-                manufacturer_string = usb_device["manufacturer_string"]
-                name = ", ".join(get_usb_device_name(vid, pid, None))
-                usb_dev = USBDeviceDescription(
-                    vid, pid, path, product_string, manufacturer_string, name
-                )
-
-                nxp_usb_devices.append(usb_dev)
-                break
-
-    return nxp_usb_devices
+    return []
 
 
 def search_nxp_uart_devices() -> Sequence[DeviceDescription]:
